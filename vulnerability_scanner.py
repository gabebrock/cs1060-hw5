#!/usr/bin/env python3
"""
Vulnerability Scanner for CS1060 HW5
Scans localhost for open ports and attempts HTTP/SSH authentication.

Code generated with assistance from Claude Sonnet 4.5 (Cascade AI)
"""

import socket
import requests
import paramiko
import nmap
import argparse
import sys
import warnings
import logging
from requests.auth import HTTPBasicAuth

# suppress all warnings and paramiko logging
warnings.filterwarnings('ignore')
logging.getLogger('paramiko').setLevel(logging.CRITICAL)

# credentials dictionary as specified
credentials = {
    'admin': 'admin',
    'root': 'abc123',
    'skroob': '12345'
}

def verbose_print(message, verbose):
    """Print message only if verbose mode is enabled"""
    if verbose:
        print(f"[VERBOSE] {message}", file=sys.stderr)

def scan_ports(verbose=False):
    """Scan localhost for open TCP ports below 9000"""
    verbose_print("Scanning ports on 127.0.0.1...", verbose)
    nm = nmap.PortScanner()
    
    try:
        # Scan ports 1-8999
        nm.scan('127.0.0.1', '1-8999', arguments='-sT')
        
        open_ports = []
        if '127.0.0.1' in nm.all_hosts():
            for proto in nm['127.0.0.1'].all_protocols():
                ports = nm['127.0.0.1'][proto].keys()
                for port in ports:
                    if nm['127.0.0.1'][proto][port]['state'] == 'open':
                        open_ports.append(port)
        
        verbose_print(f"Found {len(open_ports)} open ports: {open_ports}", verbose)
        return sorted(open_ports)
    
    except Exception as e:
        verbose_print(f"Error scanning ports: {e}", verbose)
        return []

def test_http(port, username, password, verbose=False):
    """Test HTTP basic authentication on given port"""
    verbose_print(f"Testing HTTP on port {port} with {username}:{password}", verbose)
    
    try:
        url = f'http://127.0.0.1:{port}/'
        response = requests.get(
            url,
            auth=HTTPBasicAuth(username, password),
            timeout=5
        )
        
        if response.status_code == 200:
            output = response.text.strip().split('\n')[0]  # Only first line
            print(f"http://{username}:{password}@127.0.0.1:{port} {output}")
            return True
    except Exception as e:
        verbose_print(f"HTTP test failed: {e}", verbose)
    
    return False

def test_ssh(port, username, password, verbose=False):
    """Test SSH password authentication on given port"""
    verbose_print(f"Testing SSH on port {port} with {username}:{password}", verbose)
    
    client = None
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        # Connect with timeout
        client.connect(
            '127.0.0.1',
            port=port,
            username=username,
            password=password,
            timeout=5,
            look_for_keys=False,
            allow_agent=False,
            banner_timeout=5
        )
        
        # Try to get output from the server
        transport = client.get_transport()
        if transport and transport.is_active():
            channel = transport.open_session(timeout=5)
            channel.settimeout(5)
            
            # Receive any data the server sends
            output = ""
            try:
                while True:
                    data = channel.recv(1024)
                    if not data:
                        break
                    output += data.decode('utf-8', errors='ignore')
            except:
                pass
            
            channel.close()
            
            if output:
                output = output.strip()
                print(f"ssh://{username}:{password}@127.0.0.1:{port} {output}")
                return True
        
    except paramiko.AuthenticationException:
        verbose_print(f"SSH authentication failed for {username}", verbose)
    except Exception as e:
        verbose_print(f"SSH test failed: {e}", verbose)
    finally:
        if client:
            try:
                client.close()
            except:
                pass
    
    return False

def main():
    parser = argparse.ArgumentParser(description='Vulnerability Scanner')
    parser.add_argument('-v', '--verbose', action='store_true',
                       help='Enable verbose output')
    args = parser.parse_args()
    
    verbose = args.verbose
    
    # Scan for open ports
    open_ports = scan_ports(verbose)
    
    # Test each port with each credential
    for port in open_ports:
        for username, password in credentials.items():
            # Try HTTP first
            test_http(port, username, password, verbose)
            
            # Try SSH
            test_ssh(port, username, password, verbose)

if __name__ == '__main__':
    main()