#!/usr/bin/env python3
"""
Vulnerability Scanner for HW5
Scans localhost for open ports and tests HTTP/SSH authentication
"""

import nmap
import requests
import paramiko
import argparse
import sys
import warnings
from requests.auth import HTTPBasicAuth

# Suppress warnings
warnings.filterwarnings('ignore')
paramiko.util.log_to_file('/dev/null')

# Credentials to test
credentials = {
    'admin': 'admin',
    'root': 'abc123',
    'skroob': '12345'
}

verbose = False

def vprint(msg):
    """Print only if verbose mode is enabled"""
    if verbose:
        print(msg, file=sys.stderr)

def scan_ports():
    """Scan localhost for open TCP ports below 9000"""
    vprint("Scanning ports on 127.0.0.1...")
    nm = nmap.PortScanner()
    
    try:
        # Scan ports 1-8999
        nm.scan('127.0.0.1', '1-8999', arguments='-sT')
        
        open_ports = []
        if '127.0.0.1' in nm.all_hosts():
            for proto in nm['127.0.0.1'].all_protocols():
                ports = nm['127.0.0.1'][proto].keys()
                for port in ports:
                    if nm['127.0.0.1'][proto][port]['state'] == 'open':
                        open_ports.append(port)
        
        vprint(f"Found {len(open_ports)} open ports: {open_ports}")
        return sorted(open_ports)
    except Exception as e:
        vprint(f"Error scanning ports: {e}")
        return []

def test_http(port, username, password):
    """Test HTTP basic authentication on given port"""
    vprint(f"Testing HTTP on port {port} with {username}:{password}")
    
    try:
        url = f'http://127.0.0.1:{port}/'
        response = requests.get(
            url,
            auth=HTTPBasicAuth(username, password),
            timeout=5
        )
        
        if response.status_code == 200:
            output = response.text.strip()
            print(f"http://{username}:{password}@127.0.0.1:{port} {output}")
            return True
    except Exception as e:
        vprint(f"HTTP test failed: {e}")
    
    return False

def test_ssh(port, username, password):
    """Test SSH password authentication on given port"""
    vprint(f"Testing SSH on port {port} with {username}:{password}")
    
    client = None
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        # Connect with timeout
        client.connect(
            '127.0.0.1',
            port=port,
            username=username,
            password=password,
            timeout=5,
            look_for_keys=False,
            allow_agent=False,
            banner_timeout=5
        )
        
        # Try to get output from the server
        transport = client.get_transport()
        if transport and transport.is_active():
            channel = transport.open_session(timeout=5)
            channel.settimeout(5)
            
            # Receive any data the server sends
            output = ""
            try:
                while True:
                    data = channel.recv(1024)
                    if not data:
                        break
                    output += data.decode('utf-8', errors='ignore')
            except:
                pass
            
            channel.close()
            
            if output:
                output = output.strip()
                print(f"ssh://{username}:{password}@127.0.0.1:{port} {output}")
                return True
        
    except paramiko.AuthenticationException:
        vprint(f"SSH authentication failed for {username}")
    except Exception as e:
        vprint(f"SSH test failed: {e}")
    finally:
        if client:
            try:
                client.close()
            except:
                pass
    
    return False

def main():
    global verbose
    
    parser = argparse.ArgumentParser(description='Vulnerability Scanner')
    parser.add_argument('-v', '--verbose', action='store_true',
                       help='Enable verbose output')
    args = parser.parse_args()
    
    verbose = args.verbose
    
    # Scan for open ports
    open_ports = scan_ports()
    
    # Test each port with each credential
    for port in open_ports:
        for username, password in credentials.items():
            # Try HTTP first
            test_http(port, username, password)
            
            # Try SSH
            test_ssh(port, username, password)

if __name__ == '__main__':
    main()